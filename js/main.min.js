var Adapter,isSvgChild,hasProp={}.hasOwnProperty,slice=[].slice;Adapter=function(){function t(){}var e,n;return t.prototype.name="native",t.prototype.domReady=function(t){var e,n,o,i,a,r,s,l,c,d,p;if(o=!1,d=!0,p=window,n=document,"complete"===(s=n.readyState)||"loaded"===s)return t();if(c=n.documentElement,e=n.addEventListener?"addEventListener":"attachEvent",l=n.addEventListener?"removeEventListener":"detachEvent",r=n.addEventListener?"":"on",i=function(e){if("readystatechange"!==e.type||"complete"===n.readyState)return("load"===e.type?p:n)[l](r+e.type,i,!1),o?void 0:(o=!0,t())},a=function(){try{c.doScroll("left")}catch(t){return t,void setTimeout(a,50)}return i("poll")},"complete"!==n.readyState){if(n.createEventObject&&c.doScroll){try{d=!p.frameElement}catch(t){}d&&a()}return n[e](r+"DOMContentLoaded",i,!1),n[e](r+"readystatechange",i,!1),p[e](r+"load",i,!1)}},t.prototype.create=function(t){var e;return e=document.createElement("div"),e.innerHTML=t,this.wrap(e.childNodes)},t.prototype.wrap=function(t){var e;return t?"string"==typeof t?(t=this.find(document.body,t),t=t?[t]:[]):t instanceof NodeList?t=function(){var n,o,i;for(i=[],n=0,o=t.length;n<o;n++)e=t[n],i.push(e);return i}():t instanceof Array||(t=[t]):t=[],t},t.prototype.unwrap=function(t){return this.wrap(t)[0]},t.prototype.tagName=function(t){return this.unwrap(t).tagName},t.prototype.attr=function(t,e,n){return 3===arguments.length?this.unwrap(t).setAttribute(e,n):this.unwrap(t).getAttribute(e)},n=0,e={},t.prototype.data=function(t,o,i){var a;return a=this.attr(t,"data-id"),a||(a=++n,this.attr(t,"data-id",a),e[a]={}),3===arguments.length?e[a][o]=i:null!=(i=e[a][o])?i:(i=this.attr(t,"data-"+Opentip.prototype.dasherize(o)),i&&(e[a][o]=i),i)},t.prototype.find=function(t,e){return this.unwrap(t).querySelector(e)},t.prototype.findAll=function(t,e){return this.unwrap(t).querySelectorAll(e)},t.prototype.update=function(t,e,n){return t=this.unwrap(t),n?(t.innerHTML="",t.appendChild(document.createTextNode(e))):t.innerHTML=e},t.prototype.append=function(t,e){var n,o;return n=this.unwrap(e),o=this.unwrap(t),o.appendChild(n)},t.prototype.remove=function(t){var e;if(t=this.unwrap(t),null!=(e=t.parentNode))return e.removeChild(t)},t.prototype.addClass=function(t,e){return this.unwrap(t).classList.add(e)},t.prototype.removeClass=function(t,e){return this.unwrap(t).classList.remove(e)},t.prototype.css=function(t,e){var n,o,i;t=this.unwrap(this.wrap(t)),o=[];for(n in e)hasProp.call(e,n)&&(i=e[n],o.push(t.style[n]=i));return o},t.prototype.dimensions=function(t){var e,n;return t=this.unwrap(this.wrap(t)),e={width:isSvgChild(t)?t.getBoundingClientRect().width:t.offsetWidth,height:isSvgChild(t)?t.getBoundingClientRect().height:t.offsetHeight},e.width&&e.height||(n={position:t.style.position||"",visibility:t.style.visibility||"",display:t.style.display||""},this.css(t,{position:"absolute",visibility:"hidden",display:"block"}),e={width:t.offsetWidth,height:t.offsetHeight},this.css(t,n)),e},t.prototype.scrollOffset=function(){return[window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft,window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop]},t.prototype.viewportDimensions=function(){return{width:document.documentElement.clientWidth,height:document.documentElement.clientHeight}},t.prototype.mousePosition=function(t){var e;if(e={x:0,y:0},null==t&&(t=window.event),null!=t){try{t.pageX||t.pageY?(e.x=t.pageX,e.y=t.pageY):(t.clientX||t.clientY)&&(e.x=t.clientX+document.body.scrollLeft+document.documentElement.scrollLeft,e.y=t.clientY+document.body.scrollTop+document.documentElement.scrollTop)}catch(e){t=e}return e}},t.prototype.offset=function(t){var e;for(t=this.unwrap(t),e={top:t.offsetTop,left:t.offsetLeft},null!=t&&isSvgChild(t)&&(e.top=t.getBoundingClientRect().top+(document.documentElement.scrollTop||document.body.scrollTop),e.left=t.getBoundingClientRect().left+(document.documentElement.scrollLeft||document.body.scrollLeft));t=t.offsetParent;)e.top+=t.offsetTop,e.left+=t.offsetLeft,t!==document.body&&(e.top-=t.scrollTop,e.left-=t.scrollLeft);return e},t.prototype.observe=function(t,e,n){return this.unwrap(t).addEventListener(e,n,!1)},t.prototype.stopObserving=function(t,e,n){return this.unwrap(t).removeEventListener(e,n,!1)},t.prototype.ajax=function(t){var e,n,o,i;if(null==t.url)throw new Error("No url provided");if(window.XMLHttpRequest)i=new XMLHttpRequest;else if(window.ActiveXObject)try{i=new ActiveXObject("Msxml2.XMLHTTP")}catch(t){e=t;try{i=new ActiveXObject("Microsoft.XMLHTTP")}catch(t){e=t}}if(!i)throw new Error("Can't create XMLHttpRequest");return i.onreadystatechange=function(){if(4===i.readyState){try{200===i.status?"function"==typeof t.onSuccess&&t.onSuccess(i.responseText):"function"==typeof t.onError&&t.onError("Server responded with status "+i.status)}catch(n){e=n,"function"==typeof t.onError&&t.onError(e.message)}return"function"==typeof t.onComplete?t.onComplete():void 0}},i.open(null!=(n=null!=(o=t.method)?o.toUpperCase():void 0)?n:"GET",t.url),i.send()},t.prototype.clone=function(t){var e,n,o;n={};for(e in t)hasProp.call(t,e)&&(o=t[e],n[e]=o);return n},t.prototype.extend=function(){var t,e,n,o,i,a,r;for(a=arguments[0],i=2<=arguments.length?slice.call(arguments,1):[],t=0,n=i.length;t<n;t++){o=i[t];for(e in o)hasProp.call(o,e)&&(r=o[e],a[e]=r)}return a},t}(),isSvgChild=function(t){var e;for(e=t.parentNode;"BODY"!==e.nodeName;){if("svg"===e.nodeName)return!0;e=e.parentNode}return!1},Opentip.addAdapter(new Adapter),function(t){function e(e){t(this);o.toggleClass("list_dropdown")}var n=t("html, body"),o=n.find(".list-options");o.find(".option"),o.find(".active");o.on("click",e)}(jQuery),function(t){function e(e){var n=t(this),i=n.prop("class");o.find("div").removeClass("active"),n.addClass("active"),"all"==i&&t(".plot").show(),"raw"==i&&(t(".pp").hide(),t(".pr").show()),"processed"==i&&(t(".pp").show(),t(".pr").hide())}var n=t("html, body"),o=n.find(".visuals .filters");o.find("div").on("click",e)}(jQuery),function(t){function e(e){var n=t(this),o=n.prop("for"),a=i.find(".firstS");"Other"===o?(a.prop("readonly",!1),a.prop("value",""),a.prop("placeholder","Species name"),a.removeClass("readonly")):(a.prop("readonly",!0),a.prop("value",""),a.prop("placeholder",o),a.addClass("readonly"))}var n=t("html, body"),o=n.find(".choices"),i=n.find(".speciesSelected");o.find("label").on("click",e),t("div.dropzone").dropzone({url:"/file/post"})}(jQuery),function(t){function e(){r>=5?(clearInterval(o),t(".preloader").hide(),t(".gene-sorting").show(),i.find(".gene-content").each(function(){1===parseFloat(t(this).find(".c3").text())?t(this).show():t(this).hide()}),t(".dnapreloader").hide()):(n(r),r++,console.log(s))}function n(e){console.log(e);for(var n=e,o=30*(n-1);o<30*n;o++){var i=s[0].length;a.find(".gene").append("<div class='gene-content ge"+o+" clearfix'></div>");for(var r=0;r<i;r++)t(".ge"+o).append("<div class='co c"+r+"'>"+s[o][r]+"</div>")}}var o,i=t("html, body"),a=i.find(".gene-holder"),r=1,s=[];i.hasClass("datasett")&&Papa.parse("/data/TBIL-01/finalResults.csv",{download:!0,complete:function(t){s=t.data,o=setInterval(function(){e()},1e3)}})}(jQuery),particlesJS.load("particles-js","/data/particlesjs.json"),function(t){function e(e){var n=t(this).val().toLowerCase();console.log(n),""===n?(r.closest(".col-lg-3.col-md-4.col-sm-6").css("display","block"),s.show(),l.hide()):r.each(function(){var e=t(this).find("h3").text().toLowerCase(),o=t(this).find("h3").prop("class").toLowerCase().replace("animal ",""),i=t(this).attr("data-latin").toLowerCase(),a=t(this).find("h4").text().toLowerCase();t(this).closest(".col-lg-3.col-md-4.col-sm-6").css("display","none"),s.hide(),l.show(),(e.indexOf(n)>=0||o.indexOf(n)>=0||a.indexOf(n)>=0||i.indexOf(n)>=0)&&(t(this).closest(".col-lg-3.col-md-4.col-sm-6").css("display","block"),s.show(),l.hide())})}function n(){a.val(""),s.show(),l.hide(),r.closest(".col-lg-3.col-md-4.col-sm-6").css("display","block")}var o=t("body"),i=o.find(".search-holder"),a=i.find("input"),r=(o.find(".results"),o.find(".result")),s=o.find(".fa-search"),l=o.find(".fa-close");a.on("keyup",e),l.on("click",n)}(jQuery),function(t){function e(e){var o=(t(this),n.find(".gene-content")),r=i.find("option:selected").val(),s=a.val();a.prop("disabled",!1),"1"===r&&""!==s?o.each(function(){parseFloat(t(this).find(".c7").text())<=s?t(this).show():t(this).hide()}):"2"===r&&""!==s?o.each(function(){parseFloat(t(this).find(".c8").text())<=s?t(this).show():t(this).hide()}):"3"===r&&""!==s?o.each(function(){parseFloat(t(this).find(".c9").text())<=s?t(this).show():t(this).hide()}):"4"===r&&""!==s?o.each(function(){parseFloat(t(this).find(".c10").text())<=s?t(this).show():t(this).hide()}):"5"===r&&""!==s?o.each(function(){parseFloat(t(this).find(".c11").text())<=s?t(this).show():t(this).hide()}):"0"===r&&(a.prop("disabled",!0),o.each(function(){1===parseFloat(t(this).find(".c3").text())?t(this).show():t(this).hide()}))}var n=t("html, body"),o=n.find(".gene-sorting"),i=o.find(".custom-select select"),a=o.find(".val input");i.on("change",e),a.on("change",e),a.on("keyup",e)}(jQuery);var getId=function(t){return t._row},getSymbol=function(t){return t.Symbol},getX=function(t){return t.logFC},getY=function(t){return t["adj.P.Val"]},getScaled=function(t,e){return function(n){return Math.round(t(e(n)))}},isSignificant=function(t){return!!(Math.abs(getX(t))>1&&getY(t)<.05)},margin={top:20,right:20,bottom:40,left:40},axesMargin=10,width=500-margin.left-margin.right-axesMargin,height=360-margin.top-margin.bottom-axesMargin,legendWidth=110,legendHeight=60,radius=3,border=2,xScale=d3.scale.linear().range([0,width]),yScale=d3.scale.log().range([0,height]),xAxis=d3.svg.axis().scale(xScale).orient("bottom"),yAxis=d3.svg.axis().scale(yScale).orient("left"),svgVolcano=d3.select(".plot .volcano").append("svg").style("width",width+margin.left+margin.right).style("height",height+margin.top+margin.bottom),plot=svgVolcano.append("g").attr("transform","translate("+margin.left+","+margin.top+")");d3.json("/data/TBIL-01/volcano-plot.json",function(t,e){if(t)throw t;xScale.domain(d3.extent(e,getX)),yScale.domain(d3.extent(e,getY)),plot.append("g").attr("class","y axis").attr("transform","translate(0,"+-axesMargin+")").call(yAxis).append("text").attr("class","label").attr("transform","rotate(-90)").attr("y",6).attr("dy",".71em").style("text-anchor","end").text("-Log10 P-Value"),plot.append("g").attr("class","x axis").attr("transform","translate("+axesMargin+","+height+")").call(xAxis).append("text").attr("class","label").attr("x",width).attr("y",-6).style("text-anchor","end").text("Log2 Fold Changes");var n=plot.append("g").attr("class","scatter").attr("transform","translate("+axesMargin+","+-axesMargin+")"),o=n.selectAll("circle").data(e,getId).enter().append("circle").attr("cx",getScaled(xScale,getX)).attr("cy",getScaled(yScale,getY)).attr("r",radius).classed("significant",isSignificant),i=d3.scale.ordinal().domain([!0,!1]).rangeRoundPoints([0,legendHeight],1.5),a=n.append("g").attr("class","legend").attr("transform","translate("+(width-legendWidth)+",0)"),r=a.selectAll("g").data([{"adj.P.Val":.01,logFC:1.5},{"adj.P.Val":.5,logFC:.5}]).enter().append("g");r.append("circle").attr("r",radius).attr("cx",20).attr("cy",function(t){return i(isSignificant(t))}).classed("significant",isSignificant),r.append("text").attr("class","label").attr("x",30).attr("y",function(t){return i(isSignificant(t))}).style("dominant-baseline","middle").style("text-anchor","begin").text(function(t){return(isSignificant(t)?"":"not ")+"significant"});var s=d3.geom.voronoi().x(getScaled(xScale,getX)).y(getScaled(yScale,getY)).clipExtent([[0,0],[width,height]]),l=plot.append("g").attr("class","voronoi").attr("transform","translate("+axesMargin+","+-axesMargin+")");d3.selection.prototype.moveToFront=function(){return this.each(function(){this.parentNode.appendChild(this)})},svgVolcano.append("defs").selectAll("clipPath").data(e).enter().append("svg:clipPath").attr("id",getId).append("circle").attr("cx",getScaled(xScale,getX)).attr("cy",getScaled(yScale,getY)).attr("r",20);var c=l.selectAll("path").data(s(e).map(d3.geom.polygon).filter(function(t){return function(e){return e.area()>t}}(Math.pow(radius+border/2,2)*Math.PI))).enter().append("svg:polygon").attr("points",function(t){if(t)return t.map(function(t){return[Math.round(t[0]),Math.round(t[1])]}).join(",")}).attr("clip-path",function(t){return"url(#"+getId(t.point)+")"}).attr("class","invisible");o.each(function(t){var e="<p>ID: "+getId(t)+"<br>Log2 Fold Changes: "+getX(t)+"<br>Adjusted P-Value: "+getY(t)+"</p>";new Opentip(this,e,{title:getSymbol(t),background:"white",borderColor:"darkgray",borderWidth:2,delay:.25,hideDelay:0,shadow:!1,stem:"center bottom",target:!0,targetJoint:"center top",tipJoint:"center bottom",showOn:"mouseenter",hideOn:"mouseleave"})}),o.on("mouseenter",function(){d3.select(this).classed("hover",!0).moveToFront()}),o.on("mouseleave",function(){d3.select(this).classed("hover",!1)});var d=function(t){var e=document.createEvent("SVGEvents");e.initEvent(d3.event.type,!0,!0),o.data([t.point],getId).node().dispatchEvent(e)};c.on("mouseenter",d),c.on("mouseleave",d)}),function(t){function e(e){var o=(t(this),n.find(".gene-content")),r=i.find("option:selected").val(),s=a.val();a.prop("disabled",!1),"1"===r&&""!==s?o.each(function(){parseFloat(t(this).find(".c7").text())<=s?t(this).show():t(this).hide()}):"2"===r&&""!==s?o.each(function(){parseFloat(t(this).find(".c8").text())<=s?t(this).show():t(this).hide()}):"3"===r&&""!==s?o.each(function(){parseFloat(t(this).find(".c9").text())<=s?t(this).show():t(this).hide()}):"4"===r&&""!==s?o.each(function(){parseFloat(t(this).find(".c10").text())<=s?t(this).show():t(this).hide()}):"5"===r&&""!==s?o.each(function(){parseFloat(t(this).find(".c11").text())<=s?t(this).show():t(this).hide()}):"0"===r&&(a.prop("disabled",!0),o.each(function(){1===parseFloat(t(this).find(".c3").text())?t(this).show():t(this).hide()}))}var n=t("html, body"),o=n.find(".gene-sorting"),i=o.find(".custom-select select"),a=o.find(".val input");n.find(".volcano-holder"),n.find(".volcano"),n.find(".overlay");i.on("change",e),a.on("change",e),a.on("keyup",e)}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
